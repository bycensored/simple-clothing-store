{"version":3,"sources":["config.js","services/products.js","services/localstorage.js","components/Navigation.js","components/utils/Loader.js","components/Store.js","components/utils/Notification.js","components/cart/Cart.js","components/Product.js","components/order/Payment.js","components/order/Price.js","components/order/Shipment.js","components/order/Order.js","App.js","index.js"],"names":["name","companySuffix","description","brand","established","paypalClientID","axios","get","then","response","data","catch","console","error","cartJSON","window","localStorage","getItem","newCart","JSON","parse","items","map","product","price","currency","item","cart","setItem","stringify","index","filter","itm","i","ordersJSON","id","orders","newOrders","code","amount","discountAmount","discountCode","undefined","withRouter","location","storeInfo","className","toUpperCase","pathname","includes","to","length","type","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","order","key","Loader","role","Store","products","sync_product","src","thumbnail_url","alt","sync_variants","retail_price","format","Notification","notification","setNotification","onClick","aria-label","aria-hidden","removeFromCart","history","applyDiscount","clearCart","useState","discountNotification","setDiscountNotification","countries","setCountries","selectedCountry","setSelectedCountry","continuing","setContinuing","useEffect","subtotal","reduce","accum","current","add","discountTotal","multiply","divide","idSize","subtract","value","vat","onSubmit","event","preventDefault","target","discount","submitDiscount","htmlFor","placeholder","defaultValue","required","clearDiscount","e","form","body","firstName","lastName","email","phone","address","secondAddress","country","city","zip","state","post","push","submitInfo","href","onChange","find","states","Product","addToCart","image","setImage","variant","setVariant","switchImage","next","Math","abs","images","vari","parseInt","Payment","costs","setLoading","setOrderNotification","setPaid","clientID","options","clientId","commit","createOrder","actions","create","purchase_units","currency_code","total","breakdown","item_total","shipping","handling","digitization","additional_fee","filfillment_fee","tax_total","tax","custom_id","application_context","shipping_preference","brand_name","onApprove","capture","details","paymentApproved","Price","paid","retail_costs","quantity","Shipment","shipment","getShipmentItemName","carrier","service","rel","tracking_url","tracking_number","moment","unix","created","ship_date","reshipment","item_id","Order","orderId","addOrder","setOrder","loading","confettiSettings","document","clientWidth","clientHeight","confetti","ConfettiGenerator","render","clear","shipmentDetails","res","status","showIfNonEmpty","content","shipping_service_name","recipient","company","address1","address2","state_name","country_name","shipments","other","App","localStorageService","setCart","setOrders","setProducts","orderNotification","cartNotification","setCartNotification","connectionNotification","setConnectionNotification","storeConfig","setStoreInfo","productsService","prods","productById","Helmet","Storage","data-dismiss","exact","path","match","params","Date","getFullYear","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.2d386f35.chunk.js","sourcesContent":["/**\n * This is the clientsided config that should hold some necessary information for the store.\n * Some of this information, like the store name is also fetched from the Printful API\n */\nexport default {\n  name: 'Clothing Store',\n  companySuffix: 'tmi',\n  description: 'Comfortable clothing',\n  brand: 'CLOTHING',\n  established: '2017',\n  paypalClientID: 'ASjp9I91RNWO2A54J_Kq1oHW7M--_zDwRu1dQ0kSo38u32OMIqCaWrcEXBgkdOhygLavA_cZZPPSVojw',\n}","import axios from 'axios'\nconst baseUrl = '/api/products'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data).catch(console.error)\n}\n\nexport default { getAll }","import currency from 'currency.js'\n\nconst getCart = () => {\n  const cartJSON = window.localStorage.getItem('cart')\n  if (cartJSON){\n    const newCart = JSON.parse(cartJSON)\n    return {\n      ...newCart,\n      items: newCart.items.map(product => {\n        return {...product, price: currency(product.price)}\n      })\n    }\n  } else return {items: []}\n}\n\nconst addToCart = (item, cart) => {\n  const newCart = {...cart, items: [...cart.items, item]}\n  window.localStorage.setItem('cart', JSON.stringify(newCart))\n  return newCart\n}\n\nconst removeFromCart = (index, cart) => {\n  const newCart = {...cart, items: cart.items.filter((itm, i) => index !== i)}\n  window.localStorage.setItem('cart', JSON.stringify(newCart))\n  return newCart\n}\n\nconst applyDiscount = (code, amount, cart) => {\n  const newCart = !code ? {...cart, discountAmount: undefined, discountCode: undefined}\n    : {...cart, discountAmount: amount, discountCode: code}\n  window.localStorage.setItem('cart', JSON.stringify(newCart))\n  return newCart\n}\n\nconst clearCart = () => {\n  const newCart = {items: []}\n  window.localStorage.setItem('cart', JSON.stringify(newCart))\n  return newCart\n}\n\nconst getOrders = () => {\n  const ordersJSON = window.localStorage.getItem('orders')\n  if (ordersJSON)\n    return JSON.parse(ordersJSON)\n  else\n    return []\n}\n\nconst addOrder = (id, orders) => {\n  const newOrders = [...orders, id]\n  window.localStorage.setItem('orders', JSON.stringify(newOrders))\n  return newOrders\n}\n\nexport default {\n  getCart,\n  addToCart,\n  removeFromCart,\n  getOrders,\n  addOrder,\n  applyDiscount,\n  clearCart\n}","import React from 'react'\nimport {Link, withRouter} from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nconst Navigation = ({cart, orders, location, storeInfo}) => (\n  <div className=\"row\">\n    <div className=\"col-sm text-center\">\n      <h1 className=\"display-4 mt-2\">{storeInfo.name.toUpperCase()}</h1>\n      <ul className=\"nav nav-tabs\" id=\"nav\">\n        <li className=\"nav-item mr-auto\">\n          <Link className={`nav-link${location.pathname === '/' || location.pathname.includes('/product') ? ' active' : ''}`} to=\"/\">\n            All items\n          </Link>\n        </li>\n        <li className=\"nav-item\">\n          <Link className={`nav-link${location.pathname.includes('/cart') ? ' active' : ''}`} to=\"/cart\">\n            Shopping cart ({cart.items.length})\n          </Link>\n        </li>\n        {\n          orders.length > 0 ?\n            <li>\n              <button\n                className={`btn btn-link nav-link dropdown-toggle${location.pathname.includes('/order') ? ' active' : ''}`}\n                type=\"button\"\n                id=\"dropdownMenuButton\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\">\n                My orders\n              </button>\n              <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                {orders.map(order => <Link key={order} className=\"dropdown-item\" to={`/order/${order}`}>#{order}</Link>)}\n              </div>\n            </li>\n            : <div></div>\n        }\n      </ul>\n    </div>\n  </div>\n)\n\nNavigation.propTypes = {\n  cart: PropTypes.object,\n  orders: PropTypes.array,\n  location: PropTypes.object,\n  storeInfo: PropTypes.object\n}\n\nexport default withRouter(Navigation)","import React from 'react'\n\n/**\n * Wrapper for Bootstrap loader that can be included\n * instead of a page if the content isn't ready.\n */\nconst Loader = () => (\n  <div className=\"d-flex justify-content-center\">\n    <div className=\"spinner-border m-5\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  </div>\n)\n\nexport default Loader","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport currency from 'currency.js'\nimport Loader from './utils/Loader'\n\nconst Store = ({products}) => (\n  <div className=\"row justify-content-center\">\n    {\n      products.length > 0 ?\n        products.map(product => {\n          return (\n            <div className=\"col-sm-4 p-2\" key={product.sync_product.id}>\n              <figure className=\"figure store-figure\">\n                <img className=\"figure-img img-fluid\" src={product.sync_product.thumbnail_url} alt={product.sync_product.name} />\n                <figcaption>\n                  <h5>{product.sync_product.name}</h5>\n                  <h6>{currency(product.sync_variants[0].retail_price).format(true)}</h6>\n                  <Link className=\"btn btn-pinkish\" to={`/product/${product.sync_product.id}`} role=\"button\">View</Link>\n                </figcaption>\n              </figure>\n            </div>\n          )\n        })\n        : <Loader />\n    }\n  </div>\n)\n\nStore.propTypes = {\n  products: PropTypes.array\n}\n\nexport default Store","import React from 'react'\nimport PropTypes from 'prop-types'\n\n/**\n * Bootstrap notification wrapper\n * @param {array} notification - A STATE tuple where the first element is the notification text,\n * and the second is the alert color class, see https://getbootstrap.com/docs/4.4/components/alerts/\n * @param {function} setNotification - Function for setting the notification state\n */\nconst Notification = ({notification, setNotification}) => {\n  if (notification.length === 2)\n    return (\n      <div className={`alert ${notification[1]} alert-dismissible fade show`} role=\"alert\">\n        <button onClick={() => setNotification([])} type=\"button\" className=\"close\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n        {notification[0]}\n      </div>\n    )\n  else\n    return (<div></div>)\n}\n\nNotification.propTypes = {\n  notification: PropTypes.array,\n  setNotification: PropTypes.func\n}\n\nexport default Notification\n","import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport {withRouter} from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport currency from 'currency.js'\nimport Notification from '../utils/Notification'\n\nconst Cart = ({cart, removeFromCart, history, storeInfo, applyDiscount, clearCart}) => {\n  const [discountNotification, setDiscountNotification] = useState([])\n  const [countries, setCountries] = useState([])\n  const [selectedCountry, setSelectedCountry] = useState(undefined)\n  const [continuing, setContinuing] = useState(false)\n\n  useEffect(() => {\n    axios.get('/api/countries')\n      .then(response => setCountries(response.data))\n      .catch(console.error)\n  }, [])\n\n  const submitInfo = (event) => {\n    event.preventDefault()\n    if (!selectedCountry) return\n\n    // TODO: Make an order here after validation\n    const form = event.target\n\n    const firstName = form.firstName.value\n    const lastName = form.lastName.value\n    const email = form.email.value\n    const phone = form.phone.value\n    const address = form.address.value\n    const secondAddress = form.secondAddress.value\n    const country = form.country.value\n    const city = form.city.value\n    const zip = form.zip.value\n\n    const body = {\n      firstName,\n      lastName,\n      email,\n      phone,\n      address,\n      secondAddress,\n      country,\n      city,\n      zip,\n      cart,\n    }\n    if (form.state)\n      body.state = form.state.value\n\n    setContinuing(true)\n    axios.post('/api/orders', body)\n      .then(response => {\n        const order = response.data\n        clearCart()\n        history.push(`/order/${order}`)\n      }).catch(error => {\n        console.error(error)\n      })\n  }\n\n  const clearDiscount = (event) => {\n    event.preventDefault()\n    applyDiscount(undefined, undefined)\n  }\n\n  const submitDiscount = (event) => {\n    event.preventDefault()\n    const code = event.target.discount.value\n    axios.get(`/api/discount/${code}`)\n      .then(response => {\n        const discount = response.data\n        if (discount > 0) {\n          applyDiscount(code, discount)\n          setDiscountNotification(['Discount code applied!', 'alert-success'])\n        } else\n          setDiscountNotification(['Sorry, this code isn\\'t valid', 'alert-danger'])\n      }).catch(error => {\n        console.error(error)\n        setDiscountNotification(['Sorry, there\\'s a problem with the connection!', 'alert-danger'])\n      })\n  }\n\n  /**\n   * Calculate the subtotal and the total with discount included\n   */\n  const subtotal = cart.items.reduce((accum, current) => accum.add(current.retail_price), currency(0))\n  const discountTotal = cart.discountAmount ? subtotal.multiply(100 - cart.discountAmount).divide(100) : currency(0)\n\n  return (\n    <div className=\"row\">\n      <section className=\"col-sm p-2\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <div className=\"card card-outline-secondary mb-3\">\n              <div className=\"card-body container\">\n                <div className=\"row justify-content-between mb-2\">\n                  <div className=\"col-6\"><b>Item</b></div>\n                  <div className=\"col-6 text-right\"><b>Price (USD)</b></div>\n                </div>\n                <div>\n                  {\n                    cart.items.length > 0 ?\n                      <div>\n                        {\n                          cart.items.map((product, index) => {\n                            return (\n                              <div className=\"row justify-content-between\" key={`${product.idSize}-${index}`}>\n                                <div className=\"col-6 mb-1\">\n                                  <button className=\"btn btn-remove btn-danger\" onClick={() => removeFromCart(index)}>&times;</button>&nbsp;\n                                  {product.name}\n                                </div>\n                                <div className=\"mb-1 col-6 text-right\">{currency(product.retail_price).format(true)}</div>\n                              </div>\n                            )\n                          })\n                        }\n                        {\n                          cart.discountCode ? (\n                            <div className=\"row justify-content-between\">\n                              <div className=\"col-6\">\n                                <b>Discount{cart.discountCode ? ` (${cart.discountCode}, -${100 - cart.discountAmount}%)` : ''}</b>\n                              </div>\n                              <div className=\"col-6 text-right\">-{discountTotal.format(true)}</div>\n                            </div>\n                          ) : <div></div>\n                        }\n                      </div>\n                      : <div className=\"mb-2\">Shopping cart empty</div>\n                  }\n                </div>\n                <div className=\"row justify-content-between\">\n                  <div className=\"col-6\"><b>Total</b></div>\n                  <div className=\"col-6 text-right\" id=\"cartSummaryTotal\">{subtotal.subtract(discountTotal.value).format(true)}</div>\n                </div>\n                <div className=\"row justify-content-between\">\n                  <div className=\"col-12\">{storeInfo.vat > 0 ? <span>The VAT and shipping costs will be applied based on your submitted information.</span> : <span>Shipping costs will be calculated after you submit your information.</span>}</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"card card-outline-secondary mb-3\">\n              <div className=\"card-body\">\n                <Notification notification={discountNotification} setNotification={setDiscountNotification}/>\n                <form onSubmit={(event) => submitDiscount(event)}>\n                  <div className=\"form-row\">\n                    <div className=\"form-group col-md-6\">\n                      <label htmlFor=\"inputDiscount\" className=\"col-form-label\">Apply discount code</label>\n                      <input type=\"text\" className=\"form-control mb-2\" name=\"discount\" id=\"discount\" placeholder=\"Discount code\" defaultValue={cart.discountCode} required />\n                      <button type=\"submit\" className=\"btn btn-pinkish\">Apply</button>\n                      <button className=\"btn btn-pinkish ml-2\" onClick={(event) => clearDiscount(event)}>Clear discount</button>\n                    </div>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      <section className=\"col-sm p-2\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <div className=\"card card-outline-secondary mb-3\">\n              <div className=\"card-body\">\n                <h3>Details</h3>\n                <small className=\"text-muted\">You can not change these after fulfillment, make sure they are correct!</small>\n                <form onSubmit={(e) => submitInfo(e)}>\n                  <div className=\"form-row\">\n                    <div className=\"form-group col-md-6\">\n                      <label htmlFor=\"inputFirstName\" className=\"col-form-label\">First Name</label>\n                      <input name=\"firstName\" type=\"text\" className=\"form-control\" id=\"inputFirstName\" placeholder=\"First Name\" required />\n                    </div>\n                    <div className=\"form-group col-md-6\">\n                      <label htmlFor=\"inputLastName\" className=\"col-form-label\">Last Name</label>\n                      <input name=\"lastName\" type=\"text\" className=\"form-control\" id=\"inputLastName\" placeholder=\"Last Name\" required />\n                    </div>\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"inputEmail\" className=\"col-form-label\">Email</label>\n                    <input name=\"email\" type=\"email\" className=\"form-control\" id=\"inputEmail\" placeholder=\"your@email.com\" required />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"inputPhone\" className=\"col-form-label\">Phone Number (Including your country <a href=\"https://en.wikipedia.org/wiki/List_of_country_calling_codes\">calling code</a>)</label>\n                    <input name=\"phone\" type=\"phone\" className=\"form-control\" id=\"inputPhone\" placeholder=\"\" required />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"inputAddress\" className=\"col-form-label\">Address</label>\n                    <input name=\"address\" type=\"text\" className=\"form-control\" id=\"inputAddress\" placeholder=\"1234 Main St\" required />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"inputAddress2\" className=\"col-form-label\">Address 2 (optional)</label>\n                    <input name=\"secondAddress\" type=\"text\" className=\"form-control\" id=\"inputAddress2\" placeholder=\"Apartment, studio, or floor\" />\n                  </div>\n                  <div className=\"form-row\">\n                    <div className=\"form-group col-md-6\">\n                      <label htmlFor=\"inputCountry\" className=\"col-form-label\">Country</label>\n                      {\n                        countries ?\n                          <select name=\"country\" value={selectedCountry} onChange={(event) => setSelectedCountry(event.target.value)} id=\"inputCountry\" className=\"form-control\" required>\n                            {\n                              countries.map(country =>\n                                <option key={country.code} value={country.code}>{country.name}</option>\n                              )\n                            }\n                          </select>\n                          : <div></div>\n                      }\n                    </div>\n                    {\n                      selectedCountry && countries.find(country => country.code === selectedCountry).states ?\n                        <div className=\"form-group col-md-6\">\n                          <label htmlFor=\"inputState\" className=\"col-form-label\">State</label>\n                          <select name=\"state\" id=\"inputState\" className=\"form-control\" required>\n                            {\n                              countries\n                                .find(country => country.code === selectedCountry).states\n                                .map(state =>\n                                  <option key={state.code} value={state.code}>{state.name}</option>\n                                )\n                            }\n                          </select>\n                        </div>\n                        : <div></div>\n                    }\n                  </div>\n                  <div className=\"form-row\">\n                    <div className=\"form-group col-md-7\">\n                      <label htmlFor=\"inputCity\" className=\"col-form-label\">City</label>\n                      <input name=\"city\" type=\"text\" className=\"form-control\" id=\"inputCity\" required />\n                    </div>\n                    <div className=\"form-group col-md-5\">\n                      <label htmlFor=\"inputZip\" className=\"col-form-label\">Zip</label>\n                      <input name=\"zip\" type=\"text\" className=\"form-control\" id=\"inputZip\" required />\n                    </div>\n                  </div>\n                  {\n                    continuing ? <div className=\"spinner-border\" role=\"status\"><span className=\"sr-only\">Loading...</span></div> : <button type=\"submit\" className=\"btn btn-pinkish\">Continue to payment</button>\n                  }\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  )\n}\n\nCart.propTypes = {\n  cart: PropTypes.object,\n  removeFromCart: PropTypes.func,\n  history: PropTypes.object,\n  storeInfo: PropTypes.object,\n  applyDiscount: PropTypes.func,\n  clearCart: PropTypes.func,\n}\n\nexport default withRouter(Cart)","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport currency from 'currency.js'\n\nconst Product = ({product, addToCart}) => {\n  const [image, setImage] = useState(0)\n  const [variant, setVariant] = useState(product.sync_variants[0].id)\n\n  const submitAddCart = (event) => {\n    event.preventDefault()\n    addToCart(\n      product.sync_variants.find(vari => vari.id === variant)\n    )\n  }\n\n  const switchImage = (next) => setImage((next ? image + 1 : Math.abs(image - 1)) % images.length)\n\n  const images = [product.sync_product.thumbnail_url]\n\n  return (\n    <div className=\"row justify-content-center\">\n      <div className=\"col-md-6 col-sm-12 p-2\">\n        <figure className=\"figure\">\n          <img className=\"figure-img img-fluid\" src={images[image]} alt={product.name} />\n          {\n            images.length > 1 ?\n              <figcaption>\n                <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n                  <button onClick={() => switchImage(false)} className=\"btn btn-pinkish\">Back</button>\n                  <button onClick={() => switchImage(true)} className=\"btn btn-pinkish\">Next</button>\n                </div>\n              </figcaption>\n              : <div></div>\n          }\n        </figure>\n      </div>\n      <div className=\"col-md-6 col-sm-12 p-2\">\n        <figure className=\"figure\">\n          <figcaption>\n            <h5>{product.sync_product.name}</h5>\n            <h6>{variant ? currency(product.sync_variants.find(vari => vari.id === variant).retail_price).format(true) : '...'}</h6>\n            <p>{product.description}</p>\n            <form className=\"justify-content-center\" onSubmit={(e) => submitAddCart(e)}>\n              <div className=\"form-row justify-content-center\">\n                <div className=\"form-group\">\n                  <label className=\"col-form-label\">Size:</label>\n                  <select\n                    name=\"size\"\n                    value={variant}\n                    onChange={(event) => setVariant(parseInt(event.target.value))}\n                    className=\"form-control\"\n                    required >\n                    {\n                      product.sync_variants.map(vari =>\n                        <option key={vari.id} value={vari.id}>{vari.name}</option>\n                      )\n                    }\n                  </select>\n                </div>\n              </div>\n              <div className=\"form-group\">\n                <button type=\"submit\" className=\"btn btn-pinkish\">Add to cart</button>\n              </div>\n            </form>\n          </figcaption>\n        </figure>\n      </div>\n    </div>\n  )\n}\n\nProduct.propTypes = {\n  product: PropTypes.object,\n  addToCart: PropTypes.func\n}\n\nexport default Product","import React from 'react'\nimport { PayPalButton } from 'react-paypal-button-v2'\nimport PropTypes from 'prop-types'\nimport currency from 'currency.js'\nimport axios from 'axios'\n\nconst Payment = ({order, costs, setLoading, setOrderNotification, setPaid, clientID}) => {\n\n  // TODO: Refactor this to be in a service\n  const paymentApproved = (data, actions) => {\n    setLoading(true)\n    actions.order.capture().then(details => {\n      axios.post(`/api/confirm/${details.id}`).then(() => {\n        setOrderNotification(['Your order has been confirmed. We\\'re getting it ready for shipment now!', 'alert-success'])\n        setPaid(true)\n        setLoading(false)\n      })\n    })\n  }\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-12\">\n        You can pay with a credit / debit card via PayPal.\n        All our transactions are processed by PayPal and we never store any of your payment information.<br />\n      </div>\n      <div className=\"col-md-12\">\n        <PayPalButton\n          options={{\n            clientId: clientID,\n            commit: true\n          }}\n          createOrder={(data, actions) => {\n            return actions.order.create({\n              purchase_units: [{\n                amount: {\n                  currency_code: costs.currency,\n                  value: costs.total,\n                  breakdown: {\n                    item_total: {\n                      currency_code: costs.currency,\n                      value: costs.subtotal\n                    },\n                    shipping: {\n                      currency_code: costs.currency,\n                      value: costs.shipping\n                    },\n                    handling: {\n                      currency_code: costs.currency,\n                      value: (currency(costs.digitization).add(costs.additional_fee).add(costs.filfillment_fee).format())\n                    },\n                    tax_total: {\n                      currency_code: costs.currency,\n                      value: currency(costs.tax).add(costs.vat).format()\n                    },\n                    discount: {\n                      currency_code: costs.currency,\n                      value: costs.discount\n                    }\n                  }\n                },\n                description: `Payment for your order ${order.id}`,\n                custom_id: `${order.id}`\n              }],\n              application_context: {\n                shipping_preference: 'NO_SHIPPING',\n                brand_name: 'CLOTHING STORE'\n              }\n            })\n          }}\n          onApprove={(data, actions) => paymentApproved(data, actions)}\n        />\n      </div>\n    </div>\n  )\n}\n\nPayment.propTypes = {\n  order: PropTypes.object,\n  costs: PropTypes.object,\n  setLoading: PropTypes.func,\n  setOrderNotification: PropTypes.func,\n  setPaid: PropTypes.func,\n  clientID: PropTypes.string,\n}\n\nexport default Payment","import React from 'react'\nimport PropTypes from 'prop-types'\nimport currency from 'currency.js'\nimport Payment from './Payment'\n\nconst Price = ({order, setLoading, setOrderNotification, paid, setPaid, storeInfo}) => {\n  const costs = order.retail_costs && order.retail_costs.total ? order.retail_costs : order.costs\n\n  return (\n    <div className=\"card card-outline-secondary\">\n      <div className=\"card-body\">\n        <div className=\"row justify-content-between\">\n          <div className=\"col-4\">\n            <b>Price</b>\n          </div>\n          <div className=\"col-4 text-right\">\n            <b>$ USD</b>\n          </div>\n        </div>\n        {\n          order.items.map(item =>\n            <div key={item.name} className=\"row justify-content-between\">\n              <div className=\"col-6\">\n                {item.name} ({item.quantity})\n              </div>\n              <div className=\"col-4 text-right\">\n                <div>${item.retail_price}</div>\n              </div>\n            </div>\n          )\n        }\n        <div className=\"row justify-content-between\">\n          <div className=\"col-4\">\n            <b>Shipping</b>\n          </div>\n          <div className=\"col-4 text-right\">\n          ${costs.shipping}\n          </div>\n        </div>\n        {\n          costs.digitization ?\n            <div className=\"row justify-content-between\">\n              <div className=\"col-4\">\n                <b>Digitization</b>\n              </div>\n              <div className=\"col-4 text-right\">\n              ${costs.digitization}\n              </div>\n            </div>\n            : <div></div>\n        }\n        <div className=\"row justify-content-between\">\n          <div className=\"col-4\">\n            <b>Tax/VAT ({storeInfo.vat}%)</b>\n          </div>\n          <div className=\"col-4 text-right\">\n            {currency(costs.tax ? costs.tax : 0).add(currency(costs.vat ? costs.vat : 0).value).format(true)}\n          </div>\n        </div>\n        <div className=\"row justify-content-between\">\n          <div className=\"col-4\">\n            <b>Discount</b>\n          </div>\n          <div className=\"col-4 text-right\">\n          -${costs.discount}\n          </div>\n        </div>\n        <div className=\"row justify-content-between mb-4\">\n          <div className=\"col-4\">\n            <b>Total price</b>\n          </div>\n          <div className=\"col-4 text-right\">\n            <b>${costs.total}</b>\n          </div>\n        </div>\n        {\n          !paid ?\n            <Payment\n              costs={costs}\n              order={order}\n              setLoading={setLoading}\n              setOrderNotification={setOrderNotification}\n              setPaid={setPaid}\n              clientID={storeInfo.paypalClientID}/>\n            : <div></div>\n        }\n      </div>\n    </div>\n  )\n}\n\nPrice.propTypes = {\n  order: PropTypes.object,\n  setLoading: PropTypes.func,\n  setOrderNotification: PropTypes.func,\n  paid: PropTypes.bool,\n  setPaid: PropTypes.func,\n  storeInfo: PropTypes.object,\n}\n\nexport default Price","import React from 'react'\nimport PropTypes from 'prop-types'\nimport moment from 'moment'\n\nconst Shipment = ({shipment, getShipmentItemName}) => (\n  <div key={shipment.id}>\n    <b>Shipping ID:</b> {shipment.id}<br />\n    <b>Shipping carrier:</b> {shipment.carrier}<br />\n    <b>Shipping service:</b> {shipment.service}<br />\n    <b>Tracking ID:</b>&nbsp;\n    <a rel=\"noopener noreferrer\" target=\"_blank\" href={shipment.tracking_url}>\n      {shipment.tracking_number}\n    </a><br />\n    <b>Shipment created:</b> {moment.unix(shipment.created).format('YYYY-MM-DD')}<br />\n    <b>Shipping date:</b> {moment(shipment.ship_date).format('YYYY-MM-DD')}<br />\n    {shipment.reshipment ? <b>This is a reshipment<br /></b> : <div></div>}\n    <b>Items contained:</b>\n    <ul>\n      {shipment.items.map(item => <li key={item.item_id}>{getShipmentItemName(item.item_id)} ({item.quantity})</li>)}\n    </ul>\n  </div>\n)\n\nShipment.propTypes = {\n  shipment: PropTypes.object,\n  getShipmentItemName: PropTypes.func\n}\n\nexport default Shipment","import React, { useState, useEffect } from 'react'\nimport ConfettiGenerator from 'confetti-js'\nimport PropTypes from 'prop-types'\nimport moment from 'moment'\nimport axios from 'axios'\nimport Loader from '../utils/Loader'\nimport Price from './Price'\nimport Shipment from './Shipment'\n\nconst Order = ({orderId, setOrderNotification, addOrder, orders, storeInfo}) => {\n  const [order, setOrder] = useState({})\n  const [paid, setPaid] = useState(undefined)\n  const [loading, setLoading] = useState(false)\n\n  // Confetti for everyone who paid because they should feel good about their purchase o(*°▽°*)o\n  useEffect(() => {\n    if (paid) {\n      const confettiSettings = {\n        'target': 'confetti-holder',\n        'max': '150',\n        'size': '1',\n        'animate': true,\n        'props': ['circle', 'square', 'triangle', 'line'],\n        'colors': [[40, 167, 69], [159, 9, 109]],\n        'clock': '5',\n        'rotate': true,\n        'width': `${document.body.clientWidth}`,\n        'height': `${document.body.clientHeight}`\n      }\n      const confetti = new ConfettiGenerator(confettiSettings)\n      confetti.render()\n      return () => confetti.clear()\n    }\n  }, [paid])\n\n  const shipmentDetails = {\n    'draft': 'Your order hasn\\'t been submitted for fulfillment yet.',\n    'failed': 'There has been an error with fulfillment of your order. Please contact us immediately to get this resolved.',\n    'pending': 'We are currently working on fulfilling your order.',\n    'canceled': 'Your order has been cancelled. If this wasn\\'t on purpose please contact us immediately.',\n    'onhold': 'There has been an error with fulfillment of your order. Please contact us immediately to get this resolved.',\n    'inprocess': 'Your order is currently being fulfilled and is no longer cancellable.',\n    'partial': 'Some of your items have been shipped. The rest will be shipped later on. Contact us if you have any questions about this.',\n    'fulfilled': 'All your products have been shipped.',\n    'other': 'There is an error with your order. Please contact us immediately to get this resolved.',\n  }\n\n  const getShipmentItemName = (id) => order.items.find(item => item.id === id).name\n\n  useEffect(() => {\n    axios.get(`/api/orders/${orderId}`).then(res => {\n      setOrder(res.data)\n      if (!orders.includes(parseInt(orderId)))\n        addOrder(parseInt(orderId))\n      setPaid(res.data.status !== 'draft')\n    }).catch(console.error)\n  }, [orderId, addOrder, orders, loading, paid])\n\n  const showIfNonEmpty = (content) => content ? <div>{content}<br /></div> : <div></div>\n\n  if (!order.id)\n    return <Loader />\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-12 mt-2\">\n          <h2>\n            Order {order.id}&nbsp;\n            {\n              paid ?\n                <span className=\"badge badge-success\">Paid <i className=\"material-icons\">done</i></span>\n                :\n                <span className=\"badge badge-secondary\">\n                  {\n                    loading ?\n                      <div className=\"spinner-border\" role=\"status\"><span className=\"sr-only\">Loading...</span></div>\n                      : <div>Not paid</div>\n                  }\n                </span>\n            }\n          </h2>\n        </div>\n      </div>\n      <div className=\"row\">\n        <section className=\"col-md col-sm-12 p-2\">\n          <div className=\"card card-outline-secondary mb-3\">\n            <div className=\"card-body\">\n              <h3>Details</h3>\n              Status: <span id=\"status\">{order.status}</span><br />\n              Created: {moment.unix(order.created).format('YYYY-MM-DD')}<br />\n              Shipping method: <span id=\"shipping\">{order.shipping_service_name}</span>\n            </div>\n          </div>\n          <div className=\"card card-outline-secondary mb-3\">\n            <div className=\"card-body\">\n              <h3>Shipping address</h3>\n              <address>\n                {showIfNonEmpty(order.recipient.name)}\n                {showIfNonEmpty(order.recipient.company)}\n                {showIfNonEmpty(order.recipient.address1)}\n                {showIfNonEmpty(order.recipient.address2)}\n                {showIfNonEmpty(order.recipient.city)}\n                {showIfNonEmpty(order.recipient.zip)}\n                {showIfNonEmpty(order.recipient.state_name)}\n                {showIfNonEmpty(order.recipient.country_name)}\n                {showIfNonEmpty(order.recipient.phone)}\n                {showIfNonEmpty(order.recipient.email)}\n              </address>\n            </div>\n          </div>\n          <div className=\"card card-outline-secondary mb-3\">\n            <div className=\"card-body\">\n              <h3>Shipping details</h3>\n              {\n                order.shipments.length !== 0 ?\n                  order.shipments.map(shipment =>\n                    <Shipment key={shipment.id} shipment={shipment} getShipmentItemName={getShipmentItemName} />\n                  )\n                  : <div></div>\n              }\n              <p id=\"shipmentstatus\">\n                {shipmentDetails[order.status] ? shipmentDetails[order.status] : shipmentDetails.other}\n              </p>\n            </div>\n          </div>\n        </section>\n        <section className=\"col-md col-sm-12 p-2\">\n          <Price\n            order={order}\n            setLoading={setLoading}\n            setOrderNotification={setOrderNotification}\n            paid={paid}\n            setPaid={setPaid}\n            storeInfo={storeInfo} />\n        </section>\n      </div>\n      {paid ? <canvas id=\"confetti-holder\" /> : <div></div>}\n    </div>\n  )\n}\n\nOrder.propTypes = {\n  orderId: PropTypes.number,\n  setOrderNotification: PropTypes.func,\n  addOrder: PropTypes.func,\n  orders: PropTypes.array,\n  storeInfo: PropTypes.object,\n}\n\nexport default Order","import React, { useState, useEffect } from 'react'\nimport {\n  BrowserRouter as Router,\n  Route\n} from 'react-router-dom'\nimport axios from 'axios'\nimport {Helmet} from 'react-helmet'\nimport storeConfig from './config'\nimport productsService from './services/products'\nimport localStorageService from './services/localstorage'\nimport Navigation from './components/Navigation'\nimport Store from './components/Store'\nimport Cart from './components/cart/Cart'\nimport Product from './components/Product'\nimport Notification from './components/utils/Notification'\nimport Order from './components/order/Order'\nimport Loader from './components/utils/Loader'\n\nconst App = () => {\n  const [cart, setCart] = useState(localStorageService.getCart())\n  const [orders, setOrders] = useState(localStorageService.getOrders())\n  const [products, setProducts] = useState([])\n  const [orderNotification, setOrderNotification] = useState([])\n  const [cartNotification, setCartNotification] = useState([])\n  const [connectionNotification, setConnectionNotification] = useState([])\n  const [storeInfo, setStoreInfo] = useState(storeConfig)\n\n  // Init store information\n  useEffect(() => {\n    axios.get('/api/store')\n      .then(response => setStoreInfo({\n        ...response.data,\n        brand: storeConfig.brand,\n        companySuffix: storeInfo.companySuffix,\n        description: storeInfo.description,\n        established: storeInfo.established,\n        paypalClientID: storeInfo.paypalClientID\n      }))\n      .catch(() => setConnectionNotification(['Sorry, there\\'s a problem with the connection!', 'alert-danger']))\n  }, [\n    storeInfo.brand,\n    storeInfo.companySuffix,\n    storeInfo.description,\n    storeInfo.established,\n    storeInfo.paypalClientID\n  ])\n\n  // Init products\n  useEffect(() => {\n    productsService.getAll()\n      .then(prods => setProducts(prods))\n  }, [])\n\n  const productById = (id) => products.find(product => product.sync_product.id === parseInt(id))\n\n  const addToCart = (item) => {\n    setCart(localStorageService.addToCart(item, cart))\n    setCartNotification([`${item.name} has been added to your cart!`,'alert-success'])\n  }\n  const removeFromCart = (index) => setCart(localStorageService.removeFromCart(index, cart))\n  const applyDiscount = (code, amount) => setCart(localStorageService.applyDiscount(code, amount, cart))\n  const clearCart = () => setCart(localStorageService.clearCart())\n\n  const addOrder = (id) => setOrders(localStorageService.addOrder(id, orders))\n\n  return (\n    <main className=\"container\">\n      <Helmet>\n        <title>{storeInfo.name} | {storeInfo.description}</title>\n        <meta name=\"description\" content={storeInfo.description} />\n      </Helmet>\n      <Notification notification={connectionNotification} setNotification={setConnectionNotification} />\n      <Notification notification={orderNotification} setNotification={setOrderNotification} />\n      <Notification notification={cartNotification} setNotification={setCartNotification} />\n      <Router>\n        <div>\n          <Navigation cart={cart} orders={orders} storeInfo={storeInfo} />\n          <div className={`alert alert-danger alert-dismissible fade show ${typeof(Storage) !== 'undefined' ? 'd-none' : ''}`} role=\"alert\">\n            <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n            Our store currently only supports modern browsers, sorry!\n          </div>\n\n          <Route exact path=\"/\" render={() => <Store products={products} />} />\n          <Route path=\"/cart\" render={() =>\n            <Cart\n              cart={cart}\n              removeFromCart={removeFromCart}\n              storeInfo={storeInfo}\n              applyDiscount={applyDiscount}\n              clearCart={clearCart} />\n          } />\n          <Route exact path=\"/product/:id\" render={\n            ({match}) =>\n              productById(match.params.id) ?\n                <Product\n                  product={productById(match.params.id)}\n                  addToCart={addToCart} />\n                : <Loader />\n          } />\n          <Route exact path=\"/order/:id\" render={\n            ({match}) =>\n              <Order\n                orderId={parseInt(match.params.id)}\n                setOrderNotification={setOrderNotification}\n                addOrder={addOrder}\n                orders={orders}\n                storeInfo={storeInfo} />\n          } />\n\n          <footer className=\"row justify-content-center text-center m-1\">\n            <p>© {storeInfo.established}-{(new Date()).getFullYear()} {storeInfo.name} {storeInfo.companySuffix}. {storeInfo.brand}® is a registered trademark of {storeInfo.name} {storeInfo.companySuffix}. All rights reserved.</p>\n          </footer>\n        </div>\n      </Router>\n    </main>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './custom.scss'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}